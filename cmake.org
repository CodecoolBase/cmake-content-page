#+TITLE: CMake
#+OPTIONS: toc:nil num:nil

CMake is the build tool used in a lot of C/C++ projects nowadays.
We've been using it too for the last couple of weeks.

But we mostly used it as a magic black box so far.

- What is the exact problem it is trying to solve?
- How is it solving it?
- What is exactly that is done by CMake and not delegated to other tools?

These are the questions this page aims to answer.

* The problem at hand

In this tutorial we'll work from the shell so we have control over what is executed.
And also can inspect things between steps.
Let's create a directory to work in and enter it:

#+BEGIN_SRC sh
  $ mkdir cmake-tutorial
  $ cd cmake-tutorial
#+END_SRC

Let's create a C++ file called *max.cpp*

#+BEGIN_SRC c++ :tangle max.cpp :padline no
  namespace cmake_tutorial {
  int max(int a, int b) {
    if (a > b)
      return a;
    return b;
  }
  }
#+END_SRC

Also create a header file *max.hpp* so we can refer to our function from other files.

#+BEGIN_SRC c++ :tangle max.hpp :padline no
  #pragma once

  namespace cmake_tutorial {
  int max(int, int);
  }
#+END_SRC

And finally create a main file from where we can use it.

*main.cpp:*
#+BEGIN_SRC c++ :tangle main.cpp :padline no
  #include <iostream>

  #include "max.hpp"

  int main() {
    std::cout << "The maximum of 2 and 4 is: " << cmake_tutorial::max(2, 4)
              << std::endl;
    return 0;
  }
#+END_SRC

Now the fun part: Let's create a runnable program.

#+BEGIN_SRC sh
  $ clang++ --std=c++11 max.cpp main.cpp -o main

  $ ./main
  The maximum of 2 and 4 is: 4
#+END_SRC

Whoohoo!! Easy-peasy.

