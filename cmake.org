#+TITLE: CMake
#+OPTIONS: toc:nil num:nil

CMake is the build tool used in a lot of C/C++ projects nowadays.
We've been using it too for the last couple of weeks.

But we mostly used it as a magic black box so far.

- What is the exact problem it is trying to solve?
- How is it solving it?
- What is exactly that is done by CMake and not delegated to other tools?

These are the questions this page aims to answer.

* The problem at hand

In this tutorial we'll work from the shell so we have control over what is executed.
And also can inspect things between steps.
Let's create a directory to work in and enter it:

#+BEGIN_SRC sh
  $ mkdir cmake-tutorial
  $ cd cmake-tutorial
#+END_SRC

Let's create a C++ file called *max.cpp*

#+BEGIN_SRC c++
  namespace cmake_tutorial {
  int max(int a, int b) {
    if (a > b)
      return a;
    return b;
  }
  }
#+END_SRC

Also create a header file *max.hpp* so we can refer to our function from other files.

#+BEGIN_SRC c++
  #pragma once

  namespace cmake_tutorial {
  int max(int, int);
  }
#+END_SRC

And finally create a main file from where we can use it.

*main.cpp:*
#+BEGIN_SRC c++
  #include <iostream>

  #include "max.hpp"

  int main() {
    std::cout << "The maximum of 2 and 4 is: " << cmake_tutorial::max(2, 4)
              << std::endl;
    return 0;
  }
#+END_SRC

Now the fun part: Let's create a runnable program.

#+BEGIN_SRC sh
  $ clang++ --std=c++11 max.cpp main.cpp -o main

  $ ./main
  The maximum of 2 and 4 is: 4
#+END_SRC

Whoohoo!! Easy-peasy.

It took some arguments but nothing complicated.
Let's say we want to use variables for the numbers so we can change them consistently.
The new *main.cpp* looks like this:

#+BEGIN_SRC c++
  #include <iostream>

  #include "max.hpp"

  int main() {
    constexpr int a = 2;
    constexpr int b = 4;

    std::cout << "The maximum of " << a << " and " << b
              << " is: " << cmake_tutorial::max(a, b) << std::endl;
    return 0;
  }
#+END_SRC

Everything works just as before:

#+BEGIN_SRC sh
  $ clang++ --std=c++11 max.cpp main.cpp -o main

  $ ./main
  The maximum of 2 and 4 is: 4
#+END_SRC

*But wait!*

Now we are recompiling *max.cpp* as well.
Even though it didn't change at all.

This is not much of a problem now but we can see
how it could be a huge issue in a real project with lots of files.

What can we do?
- Keep around intermediate files.
- Recompile what's changed.
- Link the intermediates into an executable.

#+BEGIN_SRC sh
  $ for source in *.cpp; do clang++ --std=c++11 -c $source; done

  $ clang++ *.o -o main

  $ ./main
  The maximum of 2 and 4 is: 4
#+END_SRC

With the =-c= argument we managed to generate so called *object files*:

#+BEGIN_SRC sh
  $ size *.o
     text    data     bss     dec     hex filename
      365       8       1     374     176 main.o
       56       0       0      56      38 max.o
#+END_SRC

And used those instead of the =.cpp= files to link our executable.

Now we have another problem:
- We have to do more steps then before.
- We have to keep track of what has changed.

One solutions to these problems is older than the internet:

* Makefiles

Makefiles contain rules.
Rules (in general) have three parts:
- A target to make
- Dependencies needed to make the target
- List of steps to make the target from its dependencies

Rules have the following form:
#+BEGIN_SRC makefile
  target: dependency1 dependency2 dependency3
          cmd -o target dependency1 dependency2 dependency3
          echo building target done
#+END_SRC

~NOTE:~ steps are indented with a ~TAB~ character

To make writing rules less tedious and errorprone there are some special variables.
For example:
- =$@= is for the target
- =$<= is the first dependency
- =$^= is all the dependencies

Also to execute steps silently they can be prefixed with an =@= sign.

So the above rule can be rewritten like this:

#+BEGIN_SRC makefile
  target: dependency1 dependency2 dependency3
          @cmd -o $@ $^
          @echo building target done
#+END_SRC

Variables can also be introduced and used with the following syntax:

#+BEGIN_SRC makefile
  TARGET=target
  DEPENDENCIES=dependency1\
    dependency2\
    dependency3

  $(TARGET): $(DEPENDENCIES)
          @cmd -o $@ $^
          @echo building $(TARGET) done
#+END_SRC

~NOTE:~ variables with names longer than one letter have to be inside parenthesis

Based on this we can write our own makefile:

*Makefile*
#+BEGIN_SRC makefile
  CXX=clang++
  CXX_FLAGS=--std=c++11
  OBJECTS=main.o\
    max.o

  main.o: main.cpp
          @$(CXX) $(CXX_FLAGS) -c $<
          @echo COMPILE $<

  max.o: max.cpp
          @$(CXX) $(CXX_FLAGS) -c $<
          @echo COMPILE $<

  main: $(OBJECTS)
          @$(CXX) $^ -o $@
          @echo LINK $@
#+END_SRC

Let's try it:

#+BEGIN_SRC sh
  $ make main
  COMPILE main.cpp
  COMPILE max.cpp
  LINK main

  $ touch max.cpp

  $ make main
  COMPILE max.cpp
  LINK main

  $ make main
  make: 'main' is up to date.
#+END_SRC

Notice how when we update the timestamp of *max.cpp* then only *max.o* and *main* is rebuilt.
Make can figure out what needs to be rebuilt based on file timestamps.

This is pretty cool, but the rule for the object files is the same to the letter.
One more convenience is that we can make general rules based on file extension.
We had to add the extension to =.SUFFIXES= which is a special target in a Makefile.
Then we can add rules for making =.ext1= files out of =.ext2= files as the following:

#+BEGIN_SRC makefile
  .SUFFIXES: .ext1 .ext2

  .ext2.ext1:
          @cmd -o $@ $<
          @echo BUILD $@
#+END_SRC

Let's do that:

#+BEGIN_SRC makefile
  CXX=clang++
  CXX_FLAGS=--std=c++11
  OBJECTS=main.o\
    max.o

  .SUFFIXES: .cpp .o

  .cpp.o:
          @$(CXX) $(CXX_FLAGS) -c $<
          @echo COMPILE $<

  main: $(OBJECTS)
          @$(CXX) $^ -o $@
          @echo LINK $@
#+END_SRC

It is also customary to add some convenience rules.
Since they don't produce an actual output file, they are added to the =.PHONY= special target.

#+BEGIN_SRC makefile
  CXX=clang++
  CXX_FLAGS=--std=c++11
  TARGET=main
  OBJECTS=main.o\
    max.o

  .PHONY: all clean cleanall

  all: $(TARGET)

  clean:
          @rm -f $(OBJECTS)
          @echo CLEAN OBJECTS

  cleanall: clean
          @rm -f $(TARGET)
          @echo CLEAN TARGET

  .SUFFIXES: .cpp .o

  .cpp.o:
          @$(CXX) $(CXX_FLAGS) -c $<
          @echo COMPILE $<

  $(TARGET): $(OBJECTS)
          @$(CXX) $^ -o $@
          @echo LINK $@
#+END_SRC

Let's try our final Makefile:

#+BEGIN_SRC sh
  $ make cleanall
  CLEAN OBJECTS
  CLEAN TARGET

  $ make all
  COMPILE main.cpp
  COMPILE max.cpp
  LINK main

  $ ./main
  The maximum of 2 and 4 is: 4
#+END_SRC

* CMake

OK, this is all fine and cool.
But then why do we need CMake?

The reason is twofold:

** Portability

One Makefile that works on linux might not work on Windows.

Just one example: Dynamic libraries have different extensions on different systems:

- =.dll= on Windows
- =.so= on Linux and most unices
- =.dylib= on OS X

** Domain specific knowledge

We might have eliminated duplications from our Makefile but it would be mostly the same
in another C++ project.

Makefiles are very general; they can be used to build anything.
But we already know we'll build a C/C++ project, so in this case it is counter-productive
having to write all C/C++ specific rules again and again.

** The solution

Generate our Makefiles.[fn:1]

This way we have to concentrate only on the project-specific details.
For example not on how to make a static library but on that which files to build into a static library.

Let's try it!

The entrypoint is a file called *CMakeLists.txt*
#+BEGIN_SRC sh
  # set up a minimal version so we can't have compatibility issues
  cmake_minimum_required(VERSION 3.8)

  # which C++ standard to use for the project
  set(CMAKE_CXX_STANDARD 11)

  # our source files
  set(SOURCES main.cpp max.cpp)

  # our target
  add_executable(main ${SOURCES})
#+END_SRC

It is customary to us a *build directory* so we can leave our porject tree clean.
More importantly keep around different build environments in parallel.

#+BEGIN_SRC sh
  $ mkdir Build

  $ cd Build

  $ cmake -DCMAKE_BUILD_TYPE=Debug ..
  -- The C compiler identification is Clang 4.0.1
  -- The CXX compiler identification is Clang 4.0.1
  -- Check for working C compiler: /nix/store/pwcqispxzsa5hz372f29q505mq0mcw1m-clang-wrapper-4.0.1/bin/clang
  -- Check for working C compiler: /nix/store/pwcqispxzsa5hz372f29q505mq0mcw1m-clang-wrapper-4.0.1/bin/clang -- works
  -- Detecting C compiler ABI info
  -- Detecting C compiler ABI info - done
  -- Detecting C compile features
  -- Detecting C compile features - done
  -- Check for working CXX compiler: /nix/store/pwcqispxzsa5hz372f29q505mq0mcw1m-clang-wrapper-4.0.1/bin/clang++
  -- Check for working CXX compiler: /nix/store/pwcqispxzsa5hz372f29q505mq0mcw1m-clang-wrapper-4.0.1/bin/clang++ -- works
  -- Detecting CXX compiler ABI info
  -- Detecting CXX compiler ABI info - done
  -- Detecting CXX compile features
  -- Detecting CXX compile features - done
  -- Configuring done
  -- Generating done
  -- Build files have been written to: /tmp/cmake/Build

  $ ls -l
  total 28
  -rw-r--r-- 1 bence users 12423 Nov  1 23:34 CMakeCache.txt
  drwxr-xr-x 5 bence users   300 Nov  1 23:34 CMakeFiles
  -rw-r--r-- 1 bence users  5417 Nov  1 23:34 Makefile
  -rw-r--r-- 1 bence users  1348 Nov  1 23:34 cmake_install.cmake

  $ find -type f | wc -l
  29
#+END_SRC

As we can see the =cmake= command needs the root directory of our project.
And variables can be set with the =-D= option.

Every other information that is needed to build our project is deduced by CMake.

There are 29 new files generated.
Among them the most important for us is a Makefile:

#+BEGIN_SRC sh
  $ wc -l Makefile 
  208 Makefile

  $ make help
  The following are some of the valid targets for this Makefile:
  ... all (the default if no target is provided)
  ... clean
  ... depend
  ... rebuild_cache
  ... edit_cache
  ... main
  ... main.o
  ... main.i
  ... main.s
  ... max.o
  ... max.i
  ... max.s
#+END_SRC

This is a bit more involved then the one we wrote by hand.

#+BEGIN_SRC sh
  $ make all
  Scanning dependencies of target main
  [ 33%] Building CXX object CMakeFiles/main.dir/main.cpp.o
  [ 66%] Building CXX object CMakeFiles/main.dir/max.cpp.o
  [100%] Linking CXX executable main
  [100%] Built target main

  $ find -type f | wc -l
  34

  $ ./main 
  The maximum of 2 and 4 is: 4
#+END_SRC

But everything works as expected, only better.

Now that we have everything done for us let's reorganize our project.

Move header files into an *include* directory
and source files into a *src* directory.

#+BEGIN_SRC sh
  $ cd ..
  $ mkdir src
  $ mkdir include
  $ mv *.cpp src
  $ mv *.hpp include
#+END_SRC

Rewrite *CMakeLists.txt* thus
#+BEGIN_SRC sh :tangle CMakeLists.txt :padline no
  # set up a minimal version so we can't have compatibility issues
  cmake_minimum_required(VERSION 3.8)

  # which C++ standard to use for the project
  set(CMAKE_CXX_STANDARD 11)

  # add a project-level include dir
  include_directories(include)

  # add a subproject
  add_subdirectory(src)
#+END_SRC

Inside the *src* directory add a *CMakeLists.txt* for the subproject:

#+BEGIN_SRC sh :tangle src/CMakeLists.txt :padline no :mkdirp yes
  # set up a minimal version so we can't have compatibility issues
  cmake_minimum_required(VERSION 3.8)

  # our source files
  set(SOURCES main.cpp max.cpp)

  # our target
  add_executable(main ${SOURCES})
#+END_SRC

Also rewrite the include of *max.hpp* in *main.cpp*
#+BEGIN_SRC c++
  #include <max.hpp>
#+END_SRC

* Footnotes

[fn:1] CMake can generate files for multiple build systems. For example: make, ninja, etc.
